// <auto-generated />
using System;
using Cinema.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cinema.Infrastructure.Migrations
{
    [DbContext(typeof(CinemaContext))]
    [Migration("20250508175648_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("Cinema.Infrastructure.Models.EmployeeTicket", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeId", "TicketId");

                    b.HasIndex("TicketId");

                    b.ToTable("EmployeeTickets");
                });

            modelBuilder.Entity("Cinema.Infrastructure.Models.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Cinema.Infrastructure.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("People", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Cinema.Infrastructure.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("ShowTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MovieId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Cinema.Infrastructure.Models.Customer", b =>
                {
                    b.HasBaseType("Cinema.Infrastructure.Models.Person");

                    b.Property<string>("FavoriteGenre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Cinema.Infrastructure.Models.Employee", b =>
                {
                    b.HasBaseType("Cinema.Infrastructure.Models.Person");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Cinema.Infrastructure.Models.EmployeeTicket", b =>
                {
                    b.HasOne("Cinema.Infrastructure.Models.Employee", "Employee")
                        .WithMany("EmployeeTickets")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Infrastructure.Models.Ticket", "Ticket")
                        .WithMany("EmployeeTickets")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Cinema.Infrastructure.Models.Ticket", b =>
                {
                    b.HasOne("Cinema.Infrastructure.Models.Customer", "Customer")
                        .WithMany("Tickets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Infrastructure.Models.Movie", "Movie")
                        .WithMany("Tickets")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cinema.Infrastructure.Models.Customer", b =>
                {
                    b.HasOne("Cinema.Infrastructure.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("Cinema.Infrastructure.Models.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cinema.Infrastructure.Models.Employee", b =>
                {
                    b.HasOne("Cinema.Infrastructure.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("Cinema.Infrastructure.Models.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cinema.Infrastructure.Models.Movie", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Cinema.Infrastructure.Models.Ticket", b =>
                {
                    b.Navigation("EmployeeTickets");
                });

            modelBuilder.Entity("Cinema.Infrastructure.Models.Customer", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Cinema.Infrastructure.Models.Employee", b =>
                {
                    b.Navigation("EmployeeTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
